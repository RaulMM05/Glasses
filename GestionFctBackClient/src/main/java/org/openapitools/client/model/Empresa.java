/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Empresa
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T19:54:35.974239100+01:00[Europe/Madrid]", comments = "Generator version: 7.11.0")
public class Empresa {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_NOMBRE_COMERCIAL = "nombreComercial";
  @SerializedName(SERIALIZED_NAME_NOMBRE_COMERCIAL)
  @javax.annotation.Nonnull
  private String nombreComercial;

  public static final String SERIALIZED_NAME_NOMBRE_TUTOR_LABORAL = "nombreTutorLaboral";
  @SerializedName(SERIALIZED_NAME_NOMBRE_TUTOR_LABORAL)
  @javax.annotation.Nonnull
  private String nombreTutorLaboral;

  public static final String SERIALIZED_NAME_EMAIL_TUTOR_LABORAL = "emailTutorLaboral";
  @SerializedName(SERIALIZED_NAME_EMAIL_TUTOR_LABORAL)
  @javax.annotation.Nonnull
  private String emailTutorLaboral;

  public static final String SERIALIZED_NAME_TLF_TUTOR_LABORAL = "tlfTutorLaboral";
  @SerializedName(SERIALIZED_NAME_TLF_TUTOR_LABORAL)
  @javax.annotation.Nonnull
  private Integer tlfTutorLaboral;

  public Empresa() {
  }

  public Empresa id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public Empresa nombreComercial(@javax.annotation.Nonnull String nombreComercial) {
    this.nombreComercial = nombreComercial;
    return this;
  }

  /**
   * Get nombreComercial
   * @return nombreComercial
   */
  @javax.annotation.Nonnull
  public String getNombreComercial() {
    return nombreComercial;
  }

  public void setNombreComercial(@javax.annotation.Nonnull String nombreComercial) {
    this.nombreComercial = nombreComercial;
  }


  public Empresa nombreTutorLaboral(@javax.annotation.Nonnull String nombreTutorLaboral) {
    this.nombreTutorLaboral = nombreTutorLaboral;
    return this;
  }

  /**
   * Get nombreTutorLaboral
   * @return nombreTutorLaboral
   */
  @javax.annotation.Nonnull
  public String getNombreTutorLaboral() {
    return nombreTutorLaboral;
  }

  public void setNombreTutorLaboral(@javax.annotation.Nonnull String nombreTutorLaboral) {
    this.nombreTutorLaboral = nombreTutorLaboral;
  }


  public Empresa emailTutorLaboral(@javax.annotation.Nonnull String emailTutorLaboral) {
    this.emailTutorLaboral = emailTutorLaboral;
    return this;
  }

  /**
   * Get emailTutorLaboral
   * @return emailTutorLaboral
   */
  @javax.annotation.Nonnull
  public String getEmailTutorLaboral() {
    return emailTutorLaboral;
  }

  public void setEmailTutorLaboral(@javax.annotation.Nonnull String emailTutorLaboral) {
    this.emailTutorLaboral = emailTutorLaboral;
  }


  public Empresa tlfTutorLaboral(@javax.annotation.Nonnull Integer tlfTutorLaboral) {
    this.tlfTutorLaboral = tlfTutorLaboral;
    return this;
  }

  /**
   * Get tlfTutorLaboral
   * minimum: 0
   * maximum: 15
   * @return tlfTutorLaboral
   */
  @javax.annotation.Nonnull
  public Integer getTlfTutorLaboral() {
    return tlfTutorLaboral;
  }

  public void setTlfTutorLaboral(@javax.annotation.Nonnull Integer tlfTutorLaboral) {
    this.tlfTutorLaboral = tlfTutorLaboral;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Empresa empresa = (Empresa) o;
    return Objects.equals(this.id, empresa.id) &&
        Objects.equals(this.nombreComercial, empresa.nombreComercial) &&
        Objects.equals(this.nombreTutorLaboral, empresa.nombreTutorLaboral) &&
        Objects.equals(this.emailTutorLaboral, empresa.emailTutorLaboral) &&
        Objects.equals(this.tlfTutorLaboral, empresa.tlfTutorLaboral);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nombreComercial, nombreTutorLaboral, emailTutorLaboral, tlfTutorLaboral);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Empresa {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nombreComercial: ").append(toIndentedString(nombreComercial)).append("\n");
    sb.append("    nombreTutorLaboral: ").append(toIndentedString(nombreTutorLaboral)).append("\n");
    sb.append("    emailTutorLaboral: ").append(toIndentedString(emailTutorLaboral)).append("\n");
    sb.append("    tlfTutorLaboral: ").append(toIndentedString(tlfTutorLaboral)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nombreComercial");
    openapiFields.add("nombreTutorLaboral");
    openapiFields.add("emailTutorLaboral");
    openapiFields.add("tlfTutorLaboral");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nombreComercial");
    openapiRequiredFields.add("nombreTutorLaboral");
    openapiRequiredFields.add("emailTutorLaboral");
    openapiRequiredFields.add("tlfTutorLaboral");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Empresa
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Empresa.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Empresa is not found in the empty JSON string", Empresa.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Empresa.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Empresa` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Empresa.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("nombreComercial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nombreComercial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nombreComercial").toString()));
      }
      if (!jsonObj.get("nombreTutorLaboral").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nombreTutorLaboral` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nombreTutorLaboral").toString()));
      }
      if (!jsonObj.get("emailTutorLaboral").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailTutorLaboral` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailTutorLaboral").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Empresa.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Empresa' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Empresa> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Empresa.class));

       return (TypeAdapter<T>) new TypeAdapter<Empresa>() {
           @Override
           public void write(JsonWriter out, Empresa value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Empresa read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Empresa given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Empresa
   * @throws IOException if the JSON string is invalid with respect to Empresa
   */
  public static Empresa fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Empresa.class);
  }

  /**
   * Convert an instance of Empresa to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

