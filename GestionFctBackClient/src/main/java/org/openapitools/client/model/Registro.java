/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Alumno;
import org.openapitools.client.model.Fecha;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Registro
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T20:24:57.942233400+01:00[Europe/Madrid]", comments = "Generator version: 7.11.0")
public class Registro {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_HORAS = "horas";
  @SerializedName(SERIALIZED_NAME_HORAS)
  @javax.annotation.Nonnull
  private BigDecimal horas;

  public static final String SERIALIZED_NAME_DESCRIPCION = "descripcion";
  @SerializedName(SERIALIZED_NAME_DESCRIPCION)
  @javax.annotation.Nonnull
  private String descripcion;

  public static final String SERIALIZED_NAME_ALUMNO = "alumno";
  @SerializedName(SERIALIZED_NAME_ALUMNO)
  @javax.annotation.Nullable
  private Alumno alumno;

  public static final String SERIALIZED_NAME_FECHA = "fecha";
  @SerializedName(SERIALIZED_NAME_FECHA)
  @javax.annotation.Nullable
  private Fecha fecha;

  public Registro() {
  }

  public Registro id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public Registro horas(@javax.annotation.Nonnull BigDecimal horas) {
    this.horas = horas;
    return this;
  }

  /**
   * Get horas
   * @return horas
   */
  @javax.annotation.Nonnull
  public BigDecimal getHoras() {
    return horas;
  }

  public void setHoras(@javax.annotation.Nonnull BigDecimal horas) {
    this.horas = horas;
  }


  public Registro descripcion(@javax.annotation.Nonnull String descripcion) {
    this.descripcion = descripcion;
    return this;
  }

  /**
   * Get descripcion
   * @return descripcion
   */
  @javax.annotation.Nonnull
  public String getDescripcion() {
    return descripcion;
  }

  public void setDescripcion(@javax.annotation.Nonnull String descripcion) {
    this.descripcion = descripcion;
  }


  public Registro alumno(@javax.annotation.Nullable Alumno alumno) {
    this.alumno = alumno;
    return this;
  }

  /**
   * Get alumno
   * @return alumno
   */
  @javax.annotation.Nullable
  public Alumno getAlumno() {
    return alumno;
  }

  public void setAlumno(@javax.annotation.Nullable Alumno alumno) {
    this.alumno = alumno;
  }


  public Registro fecha(@javax.annotation.Nullable Fecha fecha) {
    this.fecha = fecha;
    return this;
  }

  /**
   * Get fecha
   * @return fecha
   */
  @javax.annotation.Nullable
  public Fecha getFecha() {
    return fecha;
  }

  public void setFecha(@javax.annotation.Nullable Fecha fecha) {
    this.fecha = fecha;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Registro registro = (Registro) o;
    return Objects.equals(this.id, registro.id) &&
        Objects.equals(this.horas, registro.horas) &&
        Objects.equals(this.descripcion, registro.descripcion) &&
        Objects.equals(this.alumno, registro.alumno) &&
        Objects.equals(this.fecha, registro.fecha);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, horas, descripcion, alumno, fecha);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Registro {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    horas: ").append(toIndentedString(horas)).append("\n");
    sb.append("    descripcion: ").append(toIndentedString(descripcion)).append("\n");
    sb.append("    alumno: ").append(toIndentedString(alumno)).append("\n");
    sb.append("    fecha: ").append(toIndentedString(fecha)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("horas");
    openapiFields.add("descripcion");
    openapiFields.add("alumno");
    openapiFields.add("fecha");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("horas");
    openapiRequiredFields.add("descripcion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Registro
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Registro.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Registro is not found in the empty JSON string", Registro.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Registro.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Registro` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Registro.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("descripcion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descripcion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descripcion").toString()));
      }
      // validate the optional field `alumno`
      if (jsonObj.get("alumno") != null && !jsonObj.get("alumno").isJsonNull()) {
        Alumno.validateJsonElement(jsonObj.get("alumno"));
      }
      // validate the optional field `fecha`
      if (jsonObj.get("fecha") != null && !jsonObj.get("fecha").isJsonNull()) {
        Fecha.validateJsonElement(jsonObj.get("fecha"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Registro.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Registro' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Registro> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Registro.class));

       return (TypeAdapter<T>) new TypeAdapter<Registro>() {
           @Override
           public void write(JsonWriter out, Registro value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Registro read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Registro given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Registro
   * @throws IOException if the JSON string is invalid with respect to Registro
   */
  public static Registro fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Registro.class);
  }

  /**
   * Convert an instance of Registro to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

