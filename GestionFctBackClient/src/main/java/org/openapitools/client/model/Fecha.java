/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fecha
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T19:54:35.974239100+01:00[Europe/Madrid]", comments = "Generator version: 7.11.0")
public class Fecha {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_FECHA = "fecha";
  @SerializedName(SERIALIZED_NAME_FECHA)
  @javax.annotation.Nonnull
  private LocalDate fecha;

  public static final String SERIALIZED_NAME_AñO_CURSO = "añoCurso";
  @SerializedName(SERIALIZED_NAME_AñO_CURSO)
  @javax.annotation.Nonnull
  private Integer añoCurso;

  public static final String SERIALIZED_NAME_EVALUACION = "evaluacion";
  @SerializedName(SERIALIZED_NAME_EVALUACION)
  @javax.annotation.Nonnull
  private String evaluacion;

  public Fecha() {
  }

  public Fecha id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public Fecha fecha(@javax.annotation.Nonnull LocalDate fecha) {
    this.fecha = fecha;
    return this;
  }

  /**
   * Get fecha
   * @return fecha
   */
  @javax.annotation.Nonnull
  public LocalDate getFecha() {
    return fecha;
  }

  public void setFecha(@javax.annotation.Nonnull LocalDate fecha) {
    this.fecha = fecha;
  }


  public Fecha añoCurso(@javax.annotation.Nonnull Integer añoCurso) {
    this.añoCurso = añoCurso;
    return this;
  }

  /**
   * Get añoCurso
   * minimum: 4
   * maximum: 4
   * @return añoCurso
   */
  @javax.annotation.Nonnull
  public Integer getAñoCurso() {
    return añoCurso;
  }

  public void setAñoCurso(@javax.annotation.Nonnull Integer añoCurso) {
    this.añoCurso = añoCurso;
  }


  public Fecha evaluacion(@javax.annotation.Nonnull String evaluacion) {
    this.evaluacion = evaluacion;
    return this;
  }

  /**
   * Get evaluacion
   * @return evaluacion
   */
  @javax.annotation.Nonnull
  public String getEvaluacion() {
    return evaluacion;
  }

  public void setEvaluacion(@javax.annotation.Nonnull String evaluacion) {
    this.evaluacion = evaluacion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fecha fecha = (Fecha) o;
    return Objects.equals(this.id, fecha.id) &&
        Objects.equals(this.fecha, fecha.fecha) &&
        Objects.equals(this.añoCurso, fecha.añoCurso) &&
        Objects.equals(this.evaluacion, fecha.evaluacion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fecha, añoCurso, evaluacion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fecha {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fecha: ").append(toIndentedString(fecha)).append("\n");
    sb.append("    añoCurso: ").append(toIndentedString(añoCurso)).append("\n");
    sb.append("    evaluacion: ").append(toIndentedString(evaluacion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("fecha");
    openapiFields.add("añoCurso");
    openapiFields.add("evaluacion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fecha");
    openapiRequiredFields.add("añoCurso");
    openapiRequiredFields.add("evaluacion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Fecha
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Fecha.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Fecha is not found in the empty JSON string", Fecha.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Fecha.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Fecha` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Fecha.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("evaluacion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluacion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluacion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Fecha.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Fecha' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Fecha> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Fecha.class));

       return (TypeAdapter<T>) new TypeAdapter<Fecha>() {
           @Override
           public void write(JsonWriter out, Fecha value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Fecha read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Fecha given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Fecha
   * @throws IOException if the JSON string is invalid with respect to Fecha
   */
  public static Fecha fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Fecha.class);
  }

  /**
   * Convert an instance of Fecha to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

