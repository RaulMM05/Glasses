/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Empresa;
import org.openapitools.client.model.Tutor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Alumno
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-14T16:08:54.621513400+01:00[Europe/Madrid]", comments = "Generator version: 7.10.0")
public class Alumno {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_NOMBRE_COMPLETO = "nombreCompleto";
  @SerializedName(SERIALIZED_NAME_NOMBRE_COMPLETO)
  @javax.annotation.Nonnull
  private String nombreCompleto;

  public static final String SERIALIZED_NAME_CICLO = "ciclo";
  @SerializedName(SERIALIZED_NAME_CICLO)
  @javax.annotation.Nullable
  private String ciclo;

  public static final String SERIALIZED_NAME_EVALUACIóN = "evaluación";
  @SerializedName(SERIALIZED_NAME_EVALUACIóN)
  @javax.annotation.Nullable
  private String evaluación;

  public static final String SERIALIZED_NAME_AñO = "año";
  @SerializedName(SERIALIZED_NAME_AñO)
  @javax.annotation.Nullable
  private Integer año;

  public static final String SERIALIZED_NAME_TUTOR = "tutor";
  @SerializedName(SERIALIZED_NAME_TUTOR)
  @javax.annotation.Nullable
  private Tutor tutor;

  public static final String SERIALIZED_NAME_EMPRESA = "empresa";
  @SerializedName(SERIALIZED_NAME_EMPRESA)
  @javax.annotation.Nullable
  private Empresa empresa;

  public Alumno() {
  }

  public Alumno id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public Alumno nombreCompleto(@javax.annotation.Nonnull String nombreCompleto) {
    this.nombreCompleto = nombreCompleto;
    return this;
  }

  /**
   * Get nombreCompleto
   * @return nombreCompleto
   */
  @javax.annotation.Nonnull
  public String getNombreCompleto() {
    return nombreCompleto;
  }

  public void setNombreCompleto(@javax.annotation.Nonnull String nombreCompleto) {
    this.nombreCompleto = nombreCompleto;
  }


  public Alumno ciclo(@javax.annotation.Nullable String ciclo) {
    this.ciclo = ciclo;
    return this;
  }

  /**
   * Get ciclo
   * @return ciclo
   */
  @javax.annotation.Nullable
  public String getCiclo() {
    return ciclo;
  }

  public void setCiclo(@javax.annotation.Nullable String ciclo) {
    this.ciclo = ciclo;
  }


  public Alumno evaluación(@javax.annotation.Nullable String evaluación) {
    this.evaluación = evaluación;
    return this;
  }

  /**
   * Get evaluación
   * @return evaluación
   */
  @javax.annotation.Nullable
  public String getEvaluación() {
    return evaluación;
  }

  public void setEvaluación(@javax.annotation.Nullable String evaluación) {
    this.evaluación = evaluación;
  }


  public Alumno año(@javax.annotation.Nullable Integer año) {
    this.año = año;
    return this;
  }

  /**
   * Get año
   * @return año
   */
  @javax.annotation.Nullable
  public Integer getAño() {
    return año;
  }

  public void setAño(@javax.annotation.Nullable Integer año) {
    this.año = año;
  }


  public Alumno tutor(@javax.annotation.Nullable Tutor tutor) {
    this.tutor = tutor;
    return this;
  }

  /**
   * Get tutor
   * @return tutor
   */
  @javax.annotation.Nullable
  public Tutor getTutor() {
    return tutor;
  }

  public void setTutor(@javax.annotation.Nullable Tutor tutor) {
    this.tutor = tutor;
  }


  public Alumno empresa(@javax.annotation.Nullable Empresa empresa) {
    this.empresa = empresa;
    return this;
  }

  /**
   * Get empresa
   * @return empresa
   */
  @javax.annotation.Nullable
  public Empresa getEmpresa() {
    return empresa;
  }

  public void setEmpresa(@javax.annotation.Nullable Empresa empresa) {
    this.empresa = empresa;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alumno alumno = (Alumno) o;
    return Objects.equals(this.id, alumno.id) &&
        Objects.equals(this.nombreCompleto, alumno.nombreCompleto) &&
        Objects.equals(this.ciclo, alumno.ciclo) &&
        Objects.equals(this.evaluación, alumno.evaluación) &&
        Objects.equals(this.año, alumno.año) &&
        Objects.equals(this.tutor, alumno.tutor) &&
        Objects.equals(this.empresa, alumno.empresa);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nombreCompleto, ciclo, evaluación, año, tutor, empresa);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alumno {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nombreCompleto: ").append(toIndentedString(nombreCompleto)).append("\n");
    sb.append("    ciclo: ").append(toIndentedString(ciclo)).append("\n");
    sb.append("    evaluación: ").append(toIndentedString(evaluación)).append("\n");
    sb.append("    año: ").append(toIndentedString(año)).append("\n");
    sb.append("    tutor: ").append(toIndentedString(tutor)).append("\n");
    sb.append("    empresa: ").append(toIndentedString(empresa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nombreCompleto");
    openapiFields.add("ciclo");
    openapiFields.add("evaluación");
    openapiFields.add("año");
    openapiFields.add("tutor");
    openapiFields.add("empresa");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nombreCompleto");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Alumno
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Alumno.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Alumno is not found in the empty JSON string", Alumno.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Alumno.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Alumno` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Alumno.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("nombreCompleto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nombreCompleto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nombreCompleto").toString()));
      }
      if ((jsonObj.get("ciclo") != null && !jsonObj.get("ciclo").isJsonNull()) && !jsonObj.get("ciclo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciclo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciclo").toString()));
      }
      if ((jsonObj.get("evaluación") != null && !jsonObj.get("evaluación").isJsonNull()) && !jsonObj.get("evaluación").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluación` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluación").toString()));
      }
      // validate the optional field `tutor`
      if (jsonObj.get("tutor") != null && !jsonObj.get("tutor").isJsonNull()) {
        Tutor.validateJsonElement(jsonObj.get("tutor"));
      }
      // validate the optional field `empresa`
      if (jsonObj.get("empresa") != null && !jsonObj.get("empresa").isJsonNull()) {
        Empresa.validateJsonElement(jsonObj.get("empresa"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Alumno.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Alumno' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Alumno> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Alumno.class));

       return (TypeAdapter<T>) new TypeAdapter<Alumno>() {
           @Override
           public void write(JsonWriter out, Alumno value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Alumno read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Alumno given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Alumno
   * @throws IOException if the JSON string is invalid with respect to Alumno
   */
  public static Alumno fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Alumno.class);
  }

  /**
   * Convert an instance of Alumno to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

